// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}


// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider  = "postgresql"
//   url       = env("DATABASE_URL")
//   directUrl = env("DIRECT_URL")
// }
        

model Course {
  id           String  @id @default(uuid())
  instructorId String
  title        String  @db.Text
  subtitle     String? @db.Text
  description  String? @db.Text
  imageUrl     String? @db.Text
  price        Float?
  isPublished  Boolean @default(false)

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  subCategoryId String
  subCategory   SubCategory @relation(fields: [subCategoryId], references: [id])

  levelId String?
  level   Level?  @relation(fields: [levelId], references: [id])

  sections Section[]

  purchases Purchase[]
  attendances Attendance[]

  manualPaymentRequests ManualPaymentRequest[]

  

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([categoryId])
  @@index([subCategoryId])
  @@index([levelId])
}


model Category {
  id            String        @id @default(uuid())
  name          String        @unique
  subCategories SubCategory[]
  courses       Course[]
}

model SubCategory {
  id   String @id @default(uuid())
  name String

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  courses Course[]

  @@index([categoryId])
}

model Level {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model Section {
  id          String  @id @default(uuid())
  title       String
  description String? @db.Text
  videoUrl    String? @db.Text
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  muxData MuxData?

  resources Resource[]

  progress Progress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([courseId])
}

model MuxData {
  id         String  @id @default(uuid())
  assetId    String
  playbackId String?

  sectionId String  @unique
  section   Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@index([sectionId])
}

model Resource {
  id      String @id @default(uuid())
  name    String
  fileUrl String

  sectionId String
  section   Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([sectionId])
}

model Progress {
  id        String @id @default(uuid())
  studentId String 

  sectionId String
  section   Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)
  
  // New fields for video progress tracking
  watchTimeSeconds Int @default(0)  // Total time watched in seconds
  videoDurationSeconds Int @default(0)  // Total video duration
  watchPercentage Float @default(0)  // Percentage of video watched
  lastWatchedPosition Int @default(0)  // Last position in seconds
  completedAt DateTime?  // When marked as completed
  lastWatchedAt DateTime?  // Last time video was watched

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([sectionId])
  @@unique([studentId, sectionId])
}

model Purchase {
  id         String @id @default(uuid())
  customerEmail String // Changed from customerId to customerEmail

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  // Add the missing relation field to Student
  studentId String?
  student   Student? @relation(fields: [studentId], references: [id])

  // Device-based access control fields
  deviceFingerprint String? // Unique device identifier
  deviceInfo Json? // Store device details (browser, OS, screen resolution, etc.)
  ipAddress String? // IP address when purchased
  userAgent String? // Browser user agent
  isDeviceLocked Boolean @default(true) // Whether course is locked to this device

  // Add relation to DeviceAccess
  deviceAccesses DeviceAccess[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([courseId])
  @@index([studentId])
  @@index([deviceFingerprint])
  
  @@unique([customerEmail, courseId]) // Changed from customerId_courseId to customerEmail_courseId
}

model DeviceAccess {
  id String @id @default(uuid())
  
  purchaseId String
  purchase Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  
  deviceFingerprint String
  deviceInfo Json
  ipAddress String?
  userAgent String
  
  lastAccessedAt DateTime @default(now())
  accessCount Int @default(1)
  isBlocked Boolean @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  
  @@index([purchaseId])
  @@index([deviceFingerprint])
  @@unique([purchaseId, deviceFingerprint])
}

model ManualPaymentRequest {
  id              String   @id @default(uuid())
  studentEmail    String
  studentName     String?
  fatherName      String?
  phoneNumber     String?
  whatsappNumber  String?
  cnicNumber      String?
  dateOfBirth     String?
  address         String?  @db.Text
  city            String?
  qualification   String?
  occupation      String?
  notes           String?  @db.Text // Add this new field
  courseId        String
  course          Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  transactionImage String  // URL to uploaded transaction proof
  bankDetails     String   // Bank account details used
  status          String   @default("pending") // pending, approved, rejected
  approvedBy      String?  // Instructor who approved
  rejectionReason String?  @db.Text
  
  // Device information fields
  deviceFingerprint String? // Device fingerprint from submission
  deviceInfo       Json?    // Device details from submission
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())
  
  @@index([courseId])
  @@index([studentEmail])
}

model StripeCustomer {
  id               String @id @default(uuid())
  customerId       String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}


model Teacher {
  id        String @id @default(uuid())
  userId    String @unique // Clerk user ID
  email     String @unique
  firstName String?
  lastName  String?
  isActive  Boolean @default(true)
  
  // New fields for class/section assignment
  assignedClass   String?
  assignedSection String?
  
  // Instructor who added this teacher
  addedById String
  
  attendances Attendance[] @relation("TeacherAttendance")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  
  @@index([addedById])
}

model Student {
  id        String @id @default(uuid())
  userId    String @unique // Clerk user ID
  email     String @unique
  firstName String?
  lastName  String?
  isActive  Boolean @default(true)
  
  // New fields for student details
  class     String?
  section   String?
  age       Int?
  rollNumber String? // Add this new field
  
  // Instructor who added this student
  addedById String
  
  attendances Attendance[]
  enrollments Purchase[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  
  @@index([addedById])
}


model Attendance {
  id        String @id @default(uuid())
  
  studentId String
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  courseId  String?  // Changed from String to String? (optional)
  course    Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)  // Changed from Course to Course? (optional)
  
  teacherId String
  teacher   Teacher @relation("TeacherAttendance", fields: [teacherId], references: [id], onDelete: Cascade)
  
  date      DateTime @default(now())
  isPresent Boolean @default(false)
  notes     String? @db.Text
  
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  
  @@index([studentId])
  @@index([courseId])
  @@index([teacherId])
  @@unique([studentId, teacherId, date])  // Changed from [studentId, courseId, date] to [studentId, teacherId, date]
}

model MeetingPermission {
  id          String   @id @default(cuid())
  meetingId   String
  userEmail   String
  userName    String
  isApproved  Boolean  @default(false)
  requestedAt DateTime @default(now())
  approvedAt  DateTime?
  approvedBy  String?
  
  @@unique([meetingId, userEmail])
  @@map("meeting_permissions")
}

